import {
    Component,
    Input,
    OnChanges,
    SimpleChanges,
    EventEmitter,
    Output,
    ViewChild,
    HostListener
} from '@angular/core';
import { NgProgressComponent } from '@ngx-progressbar/core';
import { takeWhile, endWith, tap } from 'rxjs/operators';
import { NgbPagination } from '@ng-bootstrap/ng-bootstrap';
import { initialTableReady, gettingDetailsLoader } from './details-grid.animations';
import { DetailsGridTableComponent } from './components/details-grid-table/details-grid-table.component';
import {
    DetailsGridResponse,
    DetailsGridRequest,
    DetailsTableData,
    DetailsTableSortEvent
} from '../dashboard/interfaces/details-grid.interfaces';

@Component({
    selector: 'app-details-grid',
    templateUrl: './details-grid.component.html',
    styleUrls: ['./details-grid.component.scss'],
    animations: [initialTableReady, gettingDetailsLoader]
})
export class DetailsGridComponent implements OnChanges {
    @Input() details: DetailsGridResponse[];
    @Input() detailsGridRequest: DetailsGridRequest;

    @Output() detailsGridRequestEvent = new EventEmitter<DetailsGridRequest>();
    @Output() downloadDetailsEvent = new EventEmitter<DetailsGridRequest>();

    // references to elements in the html file
    @ViewChild('gettingDetailsBar') private _progressBar: NgProgressComponent;
    @ViewChild('detailsGridPagination') private _detailsGridPagination: NgbPagination;
    @ViewChild('detailsGridTable') private _detailsGridTable: DetailsGridTableComponent;

    detailsInfo = {
        from: 0,
        to: 0,
        total: 0,
        filteredFrom: 0
    };

    showGettingDetailsLoader = true;
    initialTableReady = 'no';
    pageSizes = [3, 5, 10, 25, 50, 100];

    detailsData: DetailsTableData[];
    paginationCollectionSize: number;
    currentPage: number;

    @HostListener('detailsTableSortChangeEvent', ['$event.detail'])
    private _onDetailsTableSortChange(detail) {
        this.onSortChange(detail);
    }

    ngOnChanges(changes: SimpleChanges): void {
        if (changes.details && !changes.details.isFirstChange()) {
            const details = changes.details.currentValue;

            this.detailsData = details.data;
            this.detailsInfo = details.info;

            const pages = this._getPages(details.info.total, this.detailsGridRequest.length);
            this.paginationCollectionSize = (pages || 1) * 10;

            // resetting page to previous page
            this._detailsGridPagination.page = this.detailsGridRequest.start + 1;
            this.currentPage = this._detailsGridPagination.page;

            // completing progress bar
            if (this._progressBar) {
                this._progressBar.state$
                    .pipe(
                        // tap(console.log),
                        takeWhile(value => !value.active),
                        endWith({ active: true, transform: '' })
                    )
                    .subscribe(() => this._progressBar.complete());
            }
        }
    }

    private _getPages(totalRows: number, pageLength: number): number {
        // include this if when you always want at least 1 page
        if (totalRows === 0 || totalRows <= pageLength) {
            return 1;
        }

        return totalRows % pageLength <= pageLength
            ? Math.ceil(totalRows / pageLength)
            : Math.floor(totalRows / pageLength);
    }

    private _emitDataTableRequestEvent(): void {
        /*
            subsequent event requests generated by:
            1 - pagination button click **onPageChange**
            2 - display length change through **onLengthChange**
            3 - searching through table **onSearchChange**
            4 - sorting table **onSortChange**
        */

        this.detailsGridRequestEvent.emit(this.detailsGridRequest);

        // showing ag-grid loading overlay
        this._detailsGridTable.showLoadingOverlay();
    }

    /**
     * Animation Events
     */

    onGettingDetailsLoader(e): void {
        // entering
        if (e.fromState === 'void') {
            // calling starting progress bar
            this._progressBar.start();
        }

        // leaving
        if (e.toState === 'void') {
            this.initialTableReady = 'yes';
        }
    }

    onGettingDetailsProgressBarComplete(): void {
        /**
         * removing loader component from DOM
         * hence triggering animation
         */
        this.showGettingDetailsLoader = false;
    }

    /**
     * Table Events
     */

    onLengthChange(length: string): void {
        this.detailsGridRequest.start = 0;
        this.detailsGridRequest.length = Number(length);

        this._emitDataTableRequestEvent();
    }

    onSearchChange(text: string): void {
        this.detailsGridRequest.start = 0;
        this.detailsGridRequest.search = text.toLowerCase();

        this._emitDataTableRequestEvent();
    }

    onPageChange(page: number): void {
        this.detailsGridRequest.start = page - 1;

        this._emitDataTableRequestEvent();
    }

    onSortChange(sort: DetailsTableSortEvent): void {
        this.detailsGridRequest.start = 0;
        this.detailsGridRequest.sort = sort;

        this._emitDataTableRequestEvent();
    }
}
